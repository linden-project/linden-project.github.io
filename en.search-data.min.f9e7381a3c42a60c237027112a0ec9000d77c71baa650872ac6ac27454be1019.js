'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/linny.vim/',title:"Linny.vim",section:"Docs",content:"Linny.vim #   Linny.vim is a vim plugin that implements the Linden Specification.\nhttps://github.com/linden-project/linny.vim\n"}),a.add({id:1,href:'/posts/tutorial-linny-and-carl/',title:"Your personal Wiki with Linny.vim and Carl",section:"Blog",content:" intro setup carl setup linny add content add taxonomies add term widgets conclusion  Introduction #  This is a short tutorial to get you started with Linny.vim and Carl. Linny.vim is a Personal Wiki and Document database inside VimLinny.vim is a Personal Wiki and Document database inside Vim. It helps you organize all your markdown files using a smart navigation menu that is configured with markdown and reeds index files. We will setup Carl to create the index files.\nThe index files contain useful summaries generated by an indexer. We need the indexer to maintain speed. In theory Vim could do the same but this would kill all performance.\nRequirements #  For this tutorial you need up to date versions of Vim and Hugo. This tutorial is for Mac, Linux and BSD users. Sorry Windows people.\nYou need to have basic Vim knowledge and know how to install plugins.\nSetup Carl #  To install and run Carl you must clone the git repo. Run the following:\ngit clone https://github.com/linden-project/carl ~/MyWiki cd ~/MyWiki The configuration of Carl is located at config/_default/config.yaml. Most settings need to be kept, but the settings below can be modified to your needs.\ncontentDir: wikiContent dataDir: wikiConfig publishDir: wikiIndex taxonomies: tag: \u0026#34;tags\u0026#34; project: \u0026#34;projects\u0026#34; customer: \u0026#34;customers\u0026#34; Run the carl indexer #  We will use the default Carl configuration for now so lets start the engines\u0026hellip;\nhugo server \\  --renderToDisk \\  --ignoreCache \\  --forceSyncStatic \\  --cleanDestinationDir \\  --disableFastRender The above command tell\u0026rsquo;s hugo to start as server daemon, but to write every change to the configured directories.\nSetup Linny.vim #  We can now install and configure linny.vim in vim. I use junegunn/vim-plug. To install linny.vim, add\nPlug \u0026#39;linden-project/linny.vim\u0026#39;And afterward run PlugInstall. Ignore the error messages.\nConfigure the Wiki paths #  We have to tell Linny.vim where the markdown files are stored and where the index is located. Finally we ask linny to initialize.\nAdd below to your vimrc\nlet g:linnycfg_path_wiki_content = $HOME . \u0026#39;/MyWiki/wikiContent\u0026#39;let g:linnycfg_path_wiki_config = $HOME . \u0026#39;/MyWiki/wikiConfig\u0026#39;let g:linnycfg_path_index = $HOME . \u0026#39;/MyWiki/wikiIndex\u0026#39;call linny#Init()Restart Vim to be sure everything is loaded correctly. Fire up the Linny menu to check if everything is working.\n:LinnyMenuOpen Press 1 afterwards.\nFirst Steps in Linny.vim #  When you see the menu on the left side everything worked as it should. It should look like this:\n With the menu open you can use the cursor to navigate. You can also use the number and letter keys listed before the menu items.\nAdding documents #  Inside a document tou can add a wiki link between two square brackets. Afterwards move your cursor above the link and click enter. A new document will be created.\nAnother way of creating a document is browsing to a term. E.g. Tags -\u0026gt; Note. When you\u0026rsquo;re located in the term menu, you can click A. You\u0026rsquo;ll be asked to enter a new name and it will be created with the term tags:note in the Front Matter.\nThe last method to create a new document is to execute the ex-command :LinnyNewDoc\nYou can allways press R to refresh the Linny.vim menu.\nNOTE: Sometime the index files are not updated automatically. Restart the hugo process to fix this problem. This behaviour should be fixed soon.\nConfigure views #  There are three types of menu views:\n root view and custom views taxonomy views term views  The root view is the start which start as first menu. You can edit this view clicking \u0026ldquo;Edit this view\u0026rdquo; at the bottom of the menu. It looks like this:\n--- widgets: - title: Starred Documents type: starred_documents hidden: false - title: Starred Terms type: starred_terms hidden: false - title: Starred Taxanomies type: starred_taxonomies - hidden: false title: Extra Menu type: menu items: - title: Open \u0026#39;Tags\u0026#39; execute: call linny_menu#openterm(\u0026#39;tags\u0026#39;, \u0026#39;\u0026#39;) - title: Open \u0026#39;Tags:Note\u0026#39; execute: call linny_menu#openterm(\u0026#39;tags\u0026#39;, \u0026#39;note\u0026#39;) - title: Open View \u0026#39;all\u0026#39; execute: call linny_menu#openview(\u0026#39;all\u0026#39;) You can change the order, the titles, and also add more menu items. Checkout wikiConfig/views/all.yml for all available menu items.\nChanging Taxonomies. #  You can modify your taxonomies in config/_default/config.yaml, Restart your Hugo process afterwards. The taxonomy should now be listed in the Linny.vim menu all_taxonomies.\nConclusion #  Thanks for reading this tutorial. I hope this gets you started and I hope Linny.vim can be of use for you. If you have questions, or encounter problems, please submit an issue in the linny.vim or Carl issue tracker\n"}),a.add({id:2,href:'/docs/carl/',title:"Carl",section:"Docs",content:"Carl #  Carl is a Linden Indexer implemented as Hugo site.\nhttps://github.com/linden-project/carl\n"}),a.add({id:3,href:'/docs/linden-specification/',title:"Linden Specification",section:"Docs",content:"Linden Specification #  Linden is a personal database standard created with plain text files. The Specification is a standard describing how all Linden Clients and Linden Indexers should communicate.\n Records are made of markdown files. Relations are declared in front matter. The Schema grows organically utilizing simple yaml configuration files. And indexes are made of plain json files.  Taxonomies #  Linden Notes is inspired by the Hugo static website engine, and it\u0026rsquo;s way of using front matter to create user defined taxonomies.\nA taxonomy is a way of grouping content and by grouping content the therefor creating relation between content. Linden specifies the usage of front matter to classify markdown documents in term of a taxonomy.\nImplementation #  Linden is not a software itself but a way working. If you want to take notes the Linden way you can use the existing tools that implement the Linden Specification.\nYou need an Linden Menu Interface in your editor, Wiki Tags in your editor and a Linden Indexer.\nLinden Notes Tools and Applications #     Name Type Software-onderdeel github project or short name Status     Linden Specification spec Specification of the Linden Markdown Database, index en configuration https://linden-project.github.io alpha release   Lindex cli-app Implentation of a Linden Indexer written in Crystal https://github.com/linden-project/lindex alpha release   Fred cli-app Command line Front Matter Editor https://github.com/linden-project/fred alpha release   Linny.vim vim-plugin Vim Plugin that works with the Linden Notes https://github.com/linden-project/linny.vim alpha release   Linny Wiki Github tags vim-plugin Linny.vim markup extension adding github-repo tags https://github.com/linden-project/linny-wikitag-github alpha release    "}),a.add({id:4,href:'/docs/linden-specification/version-0.2/',title:"Linden Specification Version 0.2.0",section:"Linden Specification",content:"Linden Notes Specification 0.2.0 #  The official Lindex Notes Specification.\nApplication Setups #  A complete Linden Notes setup works like a good notetaking app and relational database. This can be achieved by seperated components or using one complete application.\nSeparate Linden Components #  If you use separate compontents you need to configure them so they can work together. You need the following Linden components.\n Indexer Navigator Markdown Editor with Linden add-on\u0026rsquo;s  A typical setup with compononent is a Desktop programming editor with a Linden Plugin installed and configured to work with a headless Linden indexer.\nMonolith Application #  If you have a monolith application all components are build in. A typical monolith application would be a mobile Linden Note app.\nDirectories #  There are two main directories.\nRoot Directory #  A Linden system has a root directory where the permanent content and configurations are stored. Linden apps need to know where this directory is located.\nBack-up #  The root directory should be part of your back-up.\nSynchronize #  You can synchronize the root directory to use your database on more then one machine with diffent Linden Clients. Linden Navigator and Indexer can use your database as long as this directory is available.\nLinden FileSystem #  Inside the root directory is the Linden database filesystem. Directory names can not be changed. A minimal filesystem looks like this:\n/config (here are all configuration files stored) /wiki (here are all markdown files stored)\nThe Index Directory #  If you use a stand alone Linden Indexer all Linden components need to know where the directory with index files is located.\nIt\u0026rsquo;s recommended to have the index directory outside the root directory. These files are constantly regerated, which causes performance problems when using a sync service or back-up application.\nYou do not need to backup the index directory.\nFiles #  Config Files in /linden-root/wikiConfig #  There are three types of Linden Config Files.\n   config file description mandatory     L1-CONF-TAX-#{tax}.yml taxonomy configuration no   L2-CONF-TAX-#{tax}-TRM-{term}.yml term configuration no    L1-CONF-TAX-#{tax}.yml #  A L1-CONF file is optional. It\u0026rsquo;s a yaml-file that configures one or more views when showing a taxonomy with it\u0026rsquo;s terms.\nL1-CONF-TAX Options #     key path yaml-type description mandatory default     starred boolean The singular name of a taxonomy no taxonony key   plural string The plural name of a taxonomy no null   description string Taxonomy description no null   views hash containing one or more views no null   views/group_by string groups all terms by a scalar value in term conf no null   views/only array with scalars only show terms having these scalars or IS_SET or IS_NOT_SET no null   views/except array with scalars exclude showing terms having these scalars or IS_SET or IS_NOT_SET no null   views/sort string can be: date, az, yaml_key no null   views/sort_key string if sort = yaml_key, this is the key in l2_conf used for sorting yes if sort=frontmatter_key null    Example of L1-CONF-TAX-project.yml #  Here\u0026rsquo;s an example L1-configuration:\n--- starred: true plural: projects description: Projects private and commercial views: by_type: group_by: type only: - type: IS_SET except: - archived: true private: only: - type: private except: - archived: true commercial: only: - type: commercial except: - archived: true archived: only: - archived: true L2-CONF-TAX-#{taxonomy}-TRM-#{term}.yml #  A L2-CONF file is optional. It\u0026rsquo;s a yaml-file that configures one or more views, and external locations. when showing a term with it\u0026rsquo;s values, which are markdown files.\nL2-CONF-TAX-#{taxonomy}-TRM-#{term}.yml Options #     key path yaml-type description mandatory default     title string The name of a term no term key   description string Taxonomy description no null   starred boolean Make this term starred no false   views hash containing one or more views no null   views/[view_key]/group_by string groups all terms by a scalar value in term conf no null   views/[view_key]/only array with scalars only show terms having these scalars or IS_SET or IS_NOT_SET no null   views/[view_key]/except array with scalars exclude showing terms having these scalars or IS_SET or IS_NOT_SET no null   views/[view_key]/sort string can be: date, az, frontmatter_key no null   views/[view_key]/sort_key string if sort = frontmatter_key, this is the key used for sorting yes if sort=frontmatter_key null   locations hash containing one or more locations no null   locations/[location_key] string URI of the external location, file, dir of webaddress no null    Example of L2-CONF_TAX_project_TRM_linden.yml #  Here\u0026rsquo;s an example L2-configuration:\n--- title: Linden infotext: The Linden Project starred: true locations: Linden Spec Repo: file:///Users/mipmip/dev/linden-spec gh.com/mipmip/linny.vim: https://github.com/mipmip/linny.vim gh.com/mipmip/lindex: https://github.com/mipmip/lindex type: Software Project views: type: group_by: type except: - archived: true - trash: true deelpr: group_by: sub_project except: - archived: true arch: only: - archived: true man-nl: only: - sub_project: Linny.vim Handleiding Nederlands group_by: hoofdstuk sort: frontmatter_key sort_key: sortnum man-en: only: - sub_project: Linny.vim Manual Enlish group_by: paragraph sort: frontmatter_key sort_key: sortnum Markdown files in /linden-root/wiki #  All mardown files are stored in the /wiki subdirectory.\ntemporary Index Files in de index directory #     index file datatype description status     _index_taxonomies.json array(string) all taxonomies index keys    _index_docs_starred.json array(string) all starred documents    _index_docs_with_props.json hash(string, hash) all documents and their properties    _index_docs_tasks.json hash(string, hash) documents with amounts of open/closed/total tasks    _index_docs_with_title.json  all documents and their titles depreciated   _index_terms_starred.json  all starred terms    _indexer_info.json hash(string, string) meta info about the indexer    L1-INDEX-TAX-#{taxonomy}.json hash(string, hash) hash with names of terms and their properties as hash    L2-INDEX-TAX-#{taxonomy}-TRM-#{term}.json array(string) array with filenames of member documents in this term     Version History #  0.1.1 #  Initial draft.\n0.1.2 #   All index file names added. All conf file names added. All conf options added.  0.2.0 #   Removed L0 configuration add starred to L1 config file  "}),a.add({id:5,href:'/docs/linny.vim/wiki-tags/',title:"Wiki Tags",section:"Linny.vim",content:"Linny Wiki Tags #  Linny add\u0026rsquo;s some syntax to markdown. The Linny Wiki Tags.\nLinny Wiki Tags are tags which add interactive functionality to your editor. There are wiki-link-tags and wiki-command-tags.\nUsing Wiki Tags #  A Wiki Tag works as a button, if you click the button a function will be executed.\nWith a wiki-link-tag the target will be opened in your editor. A command-tag can execute one or more editor commands.\nTo click a tag place your cursor above a tag and press .\nSome tags have extra function if you click them together with meta-buttons.\n"}),a.add({id:6,href:'/docs/fred/',title:"Fred",section:"Docs",content:"Fred #  Fred is a command line frontmatter editor.\nhttps://github.com/linden-project/fred\n"}),a.add({id:7,href:'/docs/lindex/',title:"Lindex",section:"Docs",content:"Lindex #  Lindex is a Linden Indexer written in Crystal.\nNOTE: Lindex is currently only compliant with Linden Specification 0.1.\nhttps://github.com/linden-project/lindex\n"}),a.add({id:8,href:'/posts/project-reboot/',title:"Project Reboot",section:"Blog",content:"After begin quiet for more then two years, I\u0026rsquo;m rebooting the Linden Project. Yesterday I ported the Lindex indexer to Hugo. I will call this new indexer Carl, named after Carolus Linnaeus.\nToday I started reorganizing all documentation and this is the new first Blog post in the also new Linden Project Website, which you obviously managed to find as you\u0026rsquo;re reading it right now.\nMore interesting things will come soon. Carl will be released soon. Currently I generates json index files to be used by the Linny Editor in Vim. Of course as Hugo is an website generator, this is a big invitation to create a front end for the Linny Database.\nThis website will serve as home base for the Linden Specification. The Hugo port needed us to change some of the designs of the index files, so we will implement these in the specification.\nFor the time being, will also serve as documentation home for Linny.vim, Lindex and Fred. All these projects are now officially member of the Linden Project.\n"}),a.add({id:9,href:'/docs/linden-specification/version-0.1/',title:"Linden Specification Version 0.1.2",section:"Linden Specification",content:"Linden Notes Specification 0.1.2 #  The official Lindex Notes Specification.\nVersion History #  0.1.1 #  Initial draft.\n0.1.2 #   All index file names added. All conf file names added. All conf options added.  Application Setups #  A complete Linden Notes setup works like a good notetaking app and relational database. This can be achieved by seperated components or using one complete application.\nSeparate Linden Components #  If you use separate compontents you need to configure them so they can work together. You need the following Linden components.\n Indexer Navigator Markdown Editor with Linden add-on\u0026rsquo;s  A typical setup with compononent is a Desktop programming editor with a Linden Plugin installed and configured to work with a headless Linden indexer.\nMonolith Application #  If you have a monolith application all components are build in. A typical monolith application would be a mobile Linden Note app.\nDirectories #  There are two main directories.\nRoot Directory #  A Linden system has a root directory where the permanent content and configurations are stored. Linden apps need to know where this directory is located.\nBack-up #  The root directory should be part of your back-up.\nSynchronize #  You can synchronize the root directory to use your database on more then one machine with diffent Linden Clients. Linden Navigator and Indexer can use your database as long as this directory is available.\nLinden FileSystem #  Inside the root directory is the Linden database filesystem. Directory names can not be changed. A minimal filesystem looks like this:\n/config (here are all configuration files stored) /wiki (here are all markdown files stored)\nThe Index Directory #  If you use a stand alone Linden Indexer all Linden components need to know where the directory with index files is located.\nIt\u0026rsquo;s recommended to have the index directory outside the root directory. These files are constantly regerated, which causes performance problems when using a sync service or back-up application.\nYou do not need to backup the index directory.\nFiles #  Config Files in /linden-root/config #  There are three types of Linden Config Files.\n   config file description mandatory     L0-CONF-ROOT.yml taxonomies to index yes   L1-CONF-TAX-#{tax}.yml taxonomy configuration no   L2-CONF-TAX-#{tax}-TRM-{term}.yml term configuration no    L0-CONF-ROOT.yml #  L0-CONF-ROOT.yml is the main config file. All top level taxonomies are defined in this file. This gives your Linden Menu App a clue how to browse through your database. The indexer reads this configuration to created optimized index files.\nHere\u0026rsquo;s an example of a small L0-CONF-ROOT.yml:\n--- taxonomies: project: type: has_many top_level: true features: - sub_index type: type: has_many top_level: true features: - sub_index L0-CONF-ROOT.yml Options #     key path yaml-type description mandatory     /taxonomies hash containing all indexed taxonomies yes   ../SomeTaxonomy hash containing one taxonomy configuration yes   ../../top_level boolean Show this taxonomy at the root menu no   ../../features array with named flags array with taxomy features no   ../../features sub_index flags ? no   ../../features count_tasks flags when set the indexer will write down the numbers of all open and closed checkboxes no   ../../type has_many string tanomony feature telling terms in this taxonomy has many values no   ../../type has_many_belong_to_many string tanomony feature telling terms in this taxonomy has many terms and belong to many terms no    L1-CONF-TAX-#{tax}.yml #  A L1-CONF file is optional. It\u0026rsquo;s a yaml-file that configures one or more views when showing a taxonomy with it\u0026rsquo;s terms.\nL1-CONF-TAX Options #     key path yaml-type description mandatory default     singular string The singular name of a taxonomy no taxonony key   plural string The plural name of a taxonomy no null   description string Taxonomy description no null   views hash containing one or more views no null   views/group_by string groups all terms by a scalar value in term conf no null   views/only array with scalars only show terms having these scalars or IS_SET or IS_NOT_SET no null   views/except array with scalars exclude showing terms having these scalars or IS_SET or IS_NOT_SET no null   views/sort string can be: date, az, yaml_key no null   views/sort_key string if sort = yaml_key, this is the key in l2_conf used for sorting yes if sort=frontmatter_key null    Example of L1-CONF-TAX-project.yml #  Here\u0026rsquo;s an example L1-configuration:\n--- singular: project plural: projects description: Projects private and commercial views: by_type: group_by: type only: - type: IS_SET except: - archived: true private: only: - type: private except: - archived: true commercial: only: - type: commercial except: - archived: true archived: only: - archived: true L2-CONF-TAX-#{taxonomy}-TRM-#{term}.yml #  A L2-CONF file is optional. It\u0026rsquo;s a yaml-file that configures one or more views, and external locations. when showing a term with it\u0026rsquo;s values, which are markdown files.\nL2-CONF-TAX-#{taxonomy}-TRM-#{term}.yml Options #     key path yaml-type description mandatory default     title string The name of a term no term key   description string Taxonomy description no null   starred boolean Make this term starred no false   views hash containing one or more views no null   views/[view_key]/group_by string groups all terms by a scalar value in term conf no null   views/[view_key]/only array with scalars only show terms having these scalars or IS_SET or IS_NOT_SET no null   views/[view_key]/except array with scalars exclude showing terms having these scalars or IS_SET or IS_NOT_SET no null   views/[view_key]/sort string can be: date, az, frontmatter_key no null   views/[view_key]/sort_key string if sort = frontmatter_key, this is the key used for sorting yes if sort=frontmatter_key null   locations hash containing one or more locations no null   locations/[location_key] string URI of the external location, file, dir of webaddress no null    Example of L2-CONF_TAX_project_TRM_linden.yml #  Here\u0026rsquo;s an example L2-configuration:\n--- title: Linden infotext: The Linden Project starred: true locations: Linden Spec Repo: file:///Users/mipmip/dev/linden-spec gh.com/mipmip/linny.vim: https://github.com/mipmip/linny.vim gh.com/mipmip/lindex: https://github.com/mipmip/lindex type: Software Project views: type: group_by: type except: - archived: true - trash: true deelpr: group_by: sub_project except: - archived: true arch: only: - archived: true man-nl: only: - sub_project: Linny.vim Handleiding Nederlands group_by: hoofdstuk sort: frontmatter_key sort_key: sortnum man-en: only: - sub_project: Linny.vim Manual Enlish group_by: paragraph sort: frontmatter_key sort_key: sortnum Markdown files in /linden-root/wiki #  All mardown files are stored in the /wiki subdirectory.\ntemporary Index Files in de index directory #     index file datatype description status     _index_taxonomies.json array(string) all taxonomies index keys    _index_docs_starred.json array(string) all starred documents    _index_docs_with_props.json hash(string, hash) all documents and their properties    _index_docs_tasks.json hash(string, hash) documents with amounts of open/closed/total tasks    _index_docs_with_title.json  all documents and their titles depreciated   _index_terms_starred.json  all starred terms    _indexer_info.json hash(string, string) meta info about the indexer    L1-INDEX-TAX-#{taxonomy}.json hash(string, hash) hash with names of terms and their properties as hash    L2-INDEX-TAX-#{taxonomy}-TRM-#{term}.json array(string) array with filenames of member documents in this term     #  "}),a.add({id:10,href:'/docs/linny.vim/wiki-tags/link/',title:"default link tag",section:"Wiki Tags",content:"Wiki-link-tag #  By using wiki-link-tags you point to another linden-document in the wiki database. When the document does not exist it will be created and opened afterwards.\nInternal wiki links are created by surrounding one or more words between double square brackets.\nE.g. [[Project Linny]] becomes content/wiki/project-linny.md\n   Knop actie     ENTER The markdown-file will be opened in the current buffer   CTRL-ENTER The markdown-file will be opened in a new tab    "}),a.add({id:11,href:'/docs/linny.vim/wiki-tags/dir/',title:"DIR",section:"Wiki Tags",content:"Wiki-dir-tag #  A directory will be opened with the filemanager.\nE.g. [[DIR /path/to//directory/]].\nIf the directory does not exist, linny.vim will try to create it.\n   Knop actie     ENTER The directory will be opened in the Filemanager   CTRL-ENTER The directory will be opened in netrw of NERDTree    The used filemanagers can be configured.\n"}),a.add({id:12,href:'/docs/linny.vim/wiki-tags/file/',title:"FILE",section:"Wiki Tags",content:"Wiki-file-tag #  You can create links to files. These are opened with the /usr/bin/open commando.\nE.g. [[FILE /path/to/filename/eg/my file with spaces.pdf]].\n"}),a.add({id:13,href:'/docs/linny.vim/wiki-tags/gh/',title:"GH (custom)",section:"Wiki Tags",content:"Wiki-github-tag #  This tag is implemented as seperate vim plugin to demonstrate how to implement and distribute custom wiki-tags. See the https://github.com/linden-project/linny-wikitag-github for installation instructions and source code.\nE.g [[GH linden-project/linny-wikitag-github]]\n"}),a.add({id:14,href:'/docs/linny.vim/wiki-tags/lin/',title:"LIN",section:"Wiki Tags",content:"Description #  \u0026hellip;\nUsage #  [[LIN Project: Linny.vim]]\nor\n[[LIN Project]]\n"}),a.add({id:15,href:'/docs/linny.vim/wiki-tags/shell/',title:"SHELL",section:"Wiki Tags",content:"Shell-cmd-tag #  Witg a Shell-cmd tag a shell command can be defined. Pressing  will execure the shell command.\nE.g. [[SHELL ls ~/]]\n   Knop actie     ENTER Command will be executed in the vim-terminal   CTRL-ENTER Command will be executed in a new OS terminal    "}),a.add({id:16,href:'/docs/linny.vim/wiki-tags/term/',title:"TERM",section:"Wiki Tags",content:"Wiki-term-tag #  E.g. [[TERM project =\u0026gt; Development Website big.com]]\n"}),a.add({id:17,href:'/docs/linny.vim/wiki-tags/vim/',title:"VIM",section:"Wiki Tags",content:"VIM wikitag #  Description #  Runs Vim Ex command\nUsage #  # Some vim commands embedded as Wiki Command Tags [[VIM :help 42]] [[VIM :smile]] [[VIM :set background=light]] [[VIM :set background=dark]] [[VIM: %s/\\\\(MARKSTART\\\\n\\\\)\\\\@\u0026lt;=\\\\_.*\\\\(\\\\nMARKEND\\\\)\\\\@=/\\\\=substitute(system(\u0026#39;date\u0026#39;),\u0026#39;\\\\n\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;g\u0026#39;)/g]] MARKSTART za 8 feb 2020 18:49:11 CET MARKEND "})})()